<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TinyneProject">

    <Style x:Key="ToolbarButton" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="30px"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolbarButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="BaseBorder" Padding="7" Background="{DynamicResource WindowButtonBackBrush}" BorderBrush="Transparent">
                        <Rectangle Name="IconItself" Style="{DynamicResource ToolBarCloseImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowCloseButtonHoverBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowCloseButtonHoverForeBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowCloseButtonPressedBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowCloseButtonPressedForeBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinimizeButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolbarButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="BaseBorder" Padding="8" Background="{DynamicResource WindowButtonBackBrush}" BorderThickness="0">
                        <Rectangle Name="IconItself" Style="{DynamicResource ToolBarMinimizeImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowButtonHoverBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowButtonHoverForeBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowButtonPressedBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowButtonPressedForeBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OnTopButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolbarButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="BaseBorder" Padding="7" Background="{DynamicResource WindowButtonBackBrush}" BorderThickness="0">
                        <!--<Rectangle Name="IconItself" Style="{DynamicResource ToolBarOnTopImage}" Fill="{Binding OnTopButtonForegroundBrush}"/>-->
                        <Rectangle Name="IconItself" Style="{DynamicResource ToolBarOnTopImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowButtonHoverBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowButtonHoverForeBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowButtonPressedBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowButtonPressedForeBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LogoButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolbarButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="6" Name="BaseBorder" Background="{DynamicResource WindowButtonBackBrush}" BorderThickness="0">
                        <Rectangle Name="IconItself" Style="{DynamicResource ToolBarLogoImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowButtonPressedForeBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="IconItself" Property="Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#eb7b7b"/>
                                        <GradientStop Offset=".5" Color="#ed9f7b"/>
                                        <GradientStop Offset="1" Color="#edd37b"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="AddNoteButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="Button">
                    <Border Name="BaseBorder" 
                            BorderBrush="Transparent" 
                            CornerRadius="5"
                            Opacity=".3"
                            Background="{DynamicResource WindowBackgroundBrush}">
                        <Rectangle Name="IconItself" 
                                       Style="{DynamicResource AddNoteImage}" 
                                       Height="22px" Width="{Binding Path=Height,RelativeSource={RelativeSource Mode=Self}}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:.2" 
                                                     Storyboard.TargetName="BaseBorder" 
                                                     Storyboard.TargetProperty="Opacity" 
                                                     To="1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:.2" 
                                                     Storyboard.TargetName="BaseBorder" 
                                                     Storyboard.TargetProperty="Opacity" 
                                                     To=".3"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="Click">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:.2" 
                                                     AutoReverse="True"
                                                     To="1"
                                                     Storyboard.TargetName="BaseBorder" 
                                                     Storyboard.TargetProperty="Opacity" 
                                                     />
                                    <ColorAnimation Duration="0:0:.2"
                                                    AutoReverse="True"
                                                    To="{StaticResource WindowButtonHoverBackColor}"
                                                    Storyboard.TargetName="BaseBorder"
                                                    Storyboard.TargetProperty="Background.Color"
                                                    />
                                    <ColorAnimation Duration="0:0:.2"
                                                    AutoReverse="True"
                                                    To="{StaticResource WindowButtonHoverForeColor}"
                                                    Storyboard.TargetName="IconItself"
                                                    Storyboard.TargetProperty="Fill.Color"
                                                    />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BaseBorder" Property="Background" Value="{DynamicResource WindowButtonHoverBackBrush}"/>
                            <Setter TargetName="IconItself" Property="Fill" Value="{DynamicResource WindowButtonHoverForeBrush}"/>
                        </Trigger>-->

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="EditNoteButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" 
                            ClipToBounds="True" 
                            BorderThickness="0"
                            Background="{DynamicResource WhiteBrush1Opac}"
                            Padding="9">
                        <Rectangle x:Name="IconItself" Style="{DynamicResource EditNoteImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WhiteBrush3Opac}" TargetName="Border"/>
                            <Setter Property="Fill" Value="{DynamicResource WhiteBrush5Opac}" TargetName="IconItself"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WhiteBrush5Opac}" TargetName="Border"/>
                            <Setter Property="Fill" Value="{DynamicResource WhiteBrush9Opac}" TargetName="IconItself"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteNoteButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" 
                            ClipToBounds="True" 
                            BorderThickness="0"
                            Background="{DynamicResource WhiteBrush1Opac}"
                            Padding="9">
                        <Rectangle x:Name="IconItself" Style="{DynamicResource DeleteNoteImage}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WhiteBrush3Opac}" TargetName="Border"/>
                            <Setter Property="Fill" Value="{DynamicResource WhiteBrush5Opac}" TargetName="IconItself"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WhiteBrush5Opac}" TargetName="Border"/>
                            <Setter Property="Fill" Value="{DynamicResource WhiteBrush9Opac}" TargetName="IconItself"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BackgroundSelectorButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="5">
                        
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PositiveDialogButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Foreground" Value="{DynamicResource PositiveButtonForeBrush}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="0" Background="{DynamicResource PositiveButtonBackgroundBrush}" SnapsToDevicePixels="true" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PositiveButtonPressedBackgroundBrush}" TargetName="border"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="NegativeDialogButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="FontFamily" Value="{StaticResource MainFont}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Foreground" Value="{DynamicResource NegativeButtonForeBrush}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="0" Background="{DynamicResource NegativeButtonBackgroundBrush}" SnapsToDevicePixels="true" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource NegativeButtonPressedBackgroundBrush}" TargetName="border"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>